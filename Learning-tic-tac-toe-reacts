//here the the tic tac toe game is been divided into differnet types--
// The Files section with a list of files like App.js, index.js, styles.css and a folder called public
//The code editor where you’ll see the source code of your selected file
//The browser section where you’ll see how the code you’ve written will be displayed
// The App.js file should be selected in the Files section. The contents of that file in the code editor should be

export default function Square() {
  return <button className="square">X</button>;
}

//  The code in App.js creates a component.
//In React, a component is a piece of reusable code that represents a part of a user interface. 
//Components are used to render, manage, and update the UI elements in your application. 
//Let’s look at the component line by line to see what’s going on:

export default function Square() {
  return <button className="square">X</button>;
}

export default function Square() {
  return <button className="square">X</button>;
}

//Building the board

//Currently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:

export default function Square() {
  return <button className="square">X</button><button className="square">X</button>;
}

//You’ll get this error:

Console
/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX Fragment <>...</>?


// React components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. 
//To fix this you can use Fragments (<> and </>) to wrap multiple adjacent JSX elements like this:

export default function Square() {
  return (
    <>
      <button className="square">X</button>
      <button className="square">X</button>
    </>
  );
}


// In the App.js file, update the Square component to look like this:



export default function Square() {
  return (
    <>
      <div className="board-row">
        <button className="square">1</button>
        <button className="square">2</button>
        <button className="square">3</button>
      </div>
      <div className="board-row">
        <button className="square">4</button>
        <button className="square">5</button>
        <button className="square">6</button>
      </div>
      <div className="board-row">
        <button className="square">7</button>
        <button className="square">8</button>
        <button className="square">9</button>
      </div>
    </>
  );
}



//But you now have a problem. Your component named Square, really isn’t a square anymore. 
//Let’s fix that by changing the name to Board:

export default function Board() {
  //...
}

// at this point the may look like this

export default function Board() {
  return (
    <>
      <div className="board-row">
        <button className="square">1</button>
        <button className="square">2</button>
        <button className="square">3</button>
      </div>
      <div className="board-row">
        <button className="square">4</button>
        <button className="square">5</button>
        <button className="square">6</button>
      </div>
      <div className="board-row">
        <button className="square">7</button>
        <button className="square">8</button>
        <button className="square">9</button>
      </div>
    </>
  );
}


// passing data through the proms


// First, you are going to copy the line defining your first square (<button className="square">1</button>) from your Board component into a new Square component:

function Square() {
  return <button className="square">1</button>;
}

export default function Board() {
  // ...
}

Then you’ll update the Board component to render that Square component using JSX syntax:

// ...
export defau
lt function Board() {
  return (
    <>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
    </>
  );
}


 //Update the Square component to read the value prop that you’ll pass from the Board:

function Square({ value }) {
  return <button className="square">1</button>;
}


 //function Square({ value }) indicates the Square component can be passed a prop called value.

//Now you want to display that value instead of 1 inside every square. Try doing it like this:

function Square({ value }) {
  return <button className="square">value</button>;
}


 // You wanted to render the JavaScript variable called value from your component, not the word “value”. 
 // To “escape into JavaScript” from JSX, you need curly braces. Add curly braces around value in JSX like so:

function Square({ value }) {
  return <button className="square">{value}</button>;
}


// This is because the Board component hasn’t passed the value prop to each Square component it renders yet.
//To fix it you’ll add the value prop to each Square component rendered by the Board component:

export default function Board() {
  return (
    <>
      <div className="board-row">
        <Square value="1" />
        <Square value="2" />
        <Square value="3" />
      </div>
      <div className="board-row">
        <Square value="4" />
        <Square value="5" />
        <Square value="6" />
      </div>
      <div className="board-row">
        <Square value="7" />
        <Square value="8" />
        <Square value="9" />
      </div>
    </>
  );
}


// an updated code be look like this

function Square({ value }) {
  return <button className="square">{value}</button>;
}

export default function Board() {
  return (
    <>
      <div className="board-row">
        <Square value="1" />
        <Square value="2" />
        <Square value="3" />
      </div>
      <div className="board-row">
        <Square value="4" />
        <Square value="5" />
        <Square value="6" />
      </div>
      <div className="board-row">
        <Square value="7" />
        <Square value="8" />
        <Square value="9" />
      </div>
    </>
  );
}

//  Making an iterative components

// Let’s fill the Square component with an X when you click it. Declare a function called handleClick inside of the Square. 
//Then, add onClick to the props of the button JSX element returned from the Square:

function Square({ value }) {
  function handleClick() {
    console.log('clicked!');
  }

  return (
    <button
      className="square"
      onClick={handleClick}
    >
      {value}
    </button>
  );
}


//  React provides a special function called useState that you can call from your component to let it “remember” things. 
//Let’s store the current value of the Square in state, and change it when the Square is clicked.

//Import useState at the top of the file. Remove the value prop from the Square component. 
//Instead, add a new line at the start of the Square that calls useState. Have it return a state variable called value:


import { useState } from 'react';

function Square() {
  const [value, setValue] = useState(null);

  function handleClick() {
    //...


// Since the Square component no longer accepts props anymore, you’ll remove the value prop from all nine of the Square components created by the Board component:

// ...
export default function Board() {
  return (
    <>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
    </>
  );
}

// Now you’ll change Square to display an “X” when clicked. Replace the console.log("clicked!"); event handler with setValue('X');.
// Now your Square component looks like this:

function Square() {
  const [value, setValue] = useState(null);

  function handleClick() {
    setValue('X');
  }

  return (
    <button
      className="square"
      onClick={handleClick}
    >
      {value}
    </button>
  );
}

// After you’ve made the above changes, your code will look like this:

function Square() {
  const [value, setValue] = useState(null);

  function handleClick() {
    setValue('X');
  }

  return (
    <button
      className="square"
      onClick={handleClick}
    >
      {value}
    </button>
  );
}

export default function Board() {
  return (
    <>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
      <div className="board-row">
        <Square />
        <Square />
        <Square />
      </div>
    </>
  );
}


// Completing the game //
